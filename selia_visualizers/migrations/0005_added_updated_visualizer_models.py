# Generated by Django 3.1.2 on 2020-10-25 03:15

from django.db import migrations, models
import django.db.models.deletion
from django.core.exceptions import ObjectDoesNotExist
import irekua_database.utils
import selia_visualizers.models.visualizer_module


def copy_visualizer_objects_into_new_models(apps, schema_editor):
    VisualizerVersion = apps.get_model('selia_visualizers', 'VisualizerVersion')
    VisualizerModule = apps.get_model('selia_visualizers', 'VisualizerModule')
    VisualizerItemType = apps.get_model('selia_visualizers', 'VisualizerItemType')
    Visualizer = apps.get_model('selia_visualizers', 'Visualizer')
    VisualizerComponentItemType = apps.get_model('selia_visualizers', 'VisualizerComponentItemType')

    visualizers = {}
    def get_visualizer(name):
        if name not in visualizers:
            vis = Visualizer.objects.filter(name=name).first()
            visualizers[name] = vis

        return visualizers[name]

    for visualizer in Visualizer.objects.all():
        representative = get_visualizer(visualizer.name)

        version, _ = VisualizerVersion.objects.get_or_create(
            visualizer=representative,
            version=visualizer.version,
            defaults={
                'configuration_schema': visualizer.configuration_schema,
            },
        )

        try:
            # Add a module for every component
            component = visualizer.visualizercomponent
            module, _ = VisualizerModule.objects.get_or_create(
                visualizer_version=version,
                defaults={
                    'javascript_file': component.javascript_file,
                    'is_active': True,
                })

            #Â Add admissible item types to visualizer
            queryset = VisualizerComponentItemType.objects.filter(
                visualizer_component=component
            )

            for vis_item_type in queryset:
                VisualizerItemType.objects.get_or_create(
                    item_type=vis_item_type.item_type,
                    visualizer=representative,
                    defaults={
                        'is_active': vis_item_type.is_active,
                    },
                )

        except ObjectDoesNotExist:
            pass


class Migration(migrations.Migration):

    dependencies = [
        ('irekua_items', '0010_relocate_annotation_models'),
        ('selia_visualizers', '0004_auto_20201024_1826'),
    ]

    operations = [
        migrations.CreateModel(
            name='VisualizerVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, db_column='created_on', help_text='Date of creation', verbose_name='created on')),
                ('modified_on', models.DateTimeField(auto_now=True, db_column='modified_on', help_text='Date of last modification', verbose_name='modified on')),
                ('version', models.CharField(db_column='version', help_text='Version of visualizer app', max_length=16, verbose_name='version')),
                ('configuration_schema', models.JSONField(blank=True, db_column='configuration_schema', default=irekua_database.utils.simple_JSON_schema, help_text='JSON schema for visualizer tool configuration info', validators=[irekua_database.utils.validate_JSON_schema], verbose_name='configuration schema')),
            ],
            options={
                'verbose_name': 'Visualizer Version',
                'verbose_name_plural': 'Visualizer Versions',
                'ordering': ['visualizer', '-version'],
            },
        ),
        migrations.AddField(
            model_name='visualizer',
            name='description',
            field=models.TextField(blank=True, db_column='description', help_text='Description of the visualizer', verbose_name='description'),
        ),
        migrations.AlterUniqueTogether(
            name='visualizer',
            unique_together=set(),
        ),
        migrations.CreateModel(
            name='VisualizerModule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, db_column='created_on', help_text='Date of creation', verbose_name='created on')),
                ('modified_on', models.DateTimeField(auto_now=True, db_column='modified_on', help_text='Date of last modification', verbose_name='modified on')),
                ('javascript_file', models.FileField(db_column='javascript_file', help_text='Javascript file containing visualizer version module', upload_to=selia_visualizers.models.visualizer_module.visualizer_version_module_path, verbose_name='javascript file')),
                ('is_active', models.BooleanField(db_column='is_active', default=True, help_text='Boolean flag that indicates whether this version is to be used as the default version of this visualizer.', verbose_name='is active')),
            ],
            options={
                'verbose_name': 'Visualizer Module',
                'verbose_name_plural': 'Visualizer Modules',
                'ordering': ['-created_on'],
            },
        ),
        migrations.AddField(
            model_name='visualizerversion',
            name='visualizer',
            field=models.ForeignKey(db_column='visualizer_id', help_text='Visualizer', on_delete=django.db.models.deletion.CASCADE, to='selia_visualizers.visualizer', verbose_name='visualizer'),
        ),
        migrations.CreateModel(
            name='VisualizerItemType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, db_column='created_on', help_text='Date of creation', verbose_name='created on')),
                ('modified_on', models.DateTimeField(auto_now=True, db_column='modified_on', help_text='Date of last modification', verbose_name='modified on')),
                ('is_active', models.BooleanField(db_column='is_active', default=True, help_text='Indicates wheter this visualizer should be used as the default visualizer of this item type.', verbose_name='is active')),
                ('item_type', models.ForeignKey(db_column='item_type_id', help_text='Item type', on_delete=django.db.models.deletion.CASCADE, to='irekua_items.itemtype', verbose_name='item type')),
                ('visualizer', models.ForeignKey(db_column='visualizer_id', help_text='Visualizer', on_delete=django.db.models.deletion.CASCADE, to='selia_visualizers.visualizer', verbose_name='visualizer')),
            ],
            options={
                'verbose_name': 'Visualizer Item Type',
                'verbose_name_plural': 'Visualizer Item Types',
                'unique_together': {('item_type', 'visualizer')},
            },
        ),
        migrations.AddField(
            model_name='visualizer',
            name='item_types',
            field=models.ManyToManyField(through='selia_visualizers.VisualizerItemType', to='irekua_items.ItemType'),
        ),
        migrations.AddField(
            model_name='visualizermodule',
            name='visualizer_version',
            field=models.OneToOneField(db_column='visualizer_version_id', help_text='visualizer version to which this module belongs', on_delete=django.db.models.deletion.CASCADE, to='selia_visualizers.visualizerversion', verbose_name='visualizer version'),
        ),
        migrations.AlterUniqueTogether(
            name='visualizerversion',
            unique_together={('visualizer', 'version')},
        ),
        migrations.RunPython(
            copy_visualizer_objects_into_new_models
        )
    ]
