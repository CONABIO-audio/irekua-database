# Generated by Django 3.1.2 on 2020-10-21 23:44

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ("irekua_terms", "0005_auto_20201018_1704"),
        ("irekua_types", "0006_relocate_deployment_and_sampling_event_types"),
        ("irekua_schemas", "0002_auto_20201018_2158"),
        ("irekua_items", "0003_auto_20201019_1658"),
    ]

    operations = [
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.CreateModel(
                    name="AnnotationType",
                    fields=[
                        (
                            "id",
                            models.AutoField(
                                auto_created=True,
                                primary_key=True,
                                serialize=False,
                                verbose_name="ID",
                            ),
                        ),
                        (
                            "created_on",
                            models.DateTimeField(
                                auto_now_add=True,
                                db_column="created_on",
                                help_text="Date of creation",
                                verbose_name="created on",
                            ),
                        ),
                        (
                            "modified_on",
                            models.DateTimeField(
                                auto_now=True,
                                db_column="modified_on",
                                help_text="Date of last modification",
                                verbose_name="modified on",
                            ),
                        ),
                        (
                            "name",
                            models.CharField(
                                db_column="name",
                                help_text="Name for type of annotation",
                                max_length=64,
                                unique=True,
                                verbose_name="name",
                            ),
                        ),
                        (
                            "description",
                            models.TextField(
                                db_column="description",
                                help_text="Description of annotation type",
                                verbose_name="description",
                            ),
                        ),
                        (
                            "icon",
                            models.ImageField(
                                blank=True,
                                db_column="icon",
                                help_text="Annotation type icon",
                                null=True,
                                upload_to="images/annotation_types/",
                                verbose_name="icon",
                            ),
                        ),
                        (
                            "annotation_schema",
                            models.ForeignKey(
                                blank=True,
                                db_column="annotation_schema_id",
                                help_text="JSON Schema for annotation info",
                                null=True,
                                on_delete=django.db.models.deletion.PROTECT,
                                related_name="annotation_schema",
                                to="irekua_schemas.schema",
                                verbose_name="annotation schema",
                            ),
                        ),
                        (
                            "metadata_schema",
                            models.ForeignKey(
                                blank=True,
                                db_column="metadata_schema_id",
                                help_text="JSON Schema for additional metadata",
                                null=True,
                                on_delete=django.db.models.deletion.PROTECT,
                                related_name="annotationtype_metadata_schema",
                                to="irekua_schemas.schema",
                                verbose_name="metadata schema",
                            ),
                        ),
                    ],
                    options={
                        "verbose_name": "Annotation Type",
                        "verbose_name_plural": "Annotation Types",
                        "ordering": ["-created_on"],
                    },
                ),
                migrations.CreateModel(
                    name="EventType",
                    fields=[
                        (
                            "id",
                            models.AutoField(
                                auto_created=True,
                                primary_key=True,
                                serialize=False,
                                verbose_name="ID",
                            ),
                        ),
                        (
                            "created_on",
                            models.DateTimeField(
                                auto_now_add=True,
                                db_column="created_on",
                                help_text="Date of creation",
                                verbose_name="created on",
                            ),
                        ),
                        (
                            "modified_on",
                            models.DateTimeField(
                                auto_now=True,
                                db_column="modified_on",
                                help_text="Date of last modification",
                                verbose_name="modified on",
                            ),
                        ),
                        (
                            "name",
                            models.CharField(
                                db_column="name",
                                help_text="Name of event type",
                                max_length=64,
                                unique=True,
                                verbose_name="name",
                            ),
                        ),
                        (
                            "description",
                            models.TextField(
                                db_column="description",
                                help_text="Description of event type",
                                verbose_name="description",
                            ),
                        ),
                        (
                            "icon",
                            models.ImageField(
                                blank=True,
                                db_column="icon",
                                help_text="Event type icon",
                                null=True,
                                upload_to="images/event_types/",
                                verbose_name="icon",
                            ),
                        ),
                        (
                            "restrict_annotation_types",
                            models.BooleanField(
                                db_column="restrict_annotation_types",
                                default=False,
                                help_text="Flag indicating whether to restrict annotation types apt for this event type",
                                verbose_name="restrict annotation types",
                            ),
                        ),
                        (
                            "annotation_types",
                            models.ManyToManyField(
                                blank=True,
                                help_text="Valid annotation types for this event type",
                                to="irekua_items.AnnotationType",
                                verbose_name="annotation types",
                            ),
                        ),
                        (
                            "metadata_schema",
                            models.ForeignKey(
                                blank=True,
                                db_column="metadata_schema_id",
                                help_text="JSON Schema for additional metadata",
                                null=True,
                                on_delete=django.db.models.deletion.PROTECT,
                                related_name="eventtype_metadata_schema",
                                to="irekua_schemas.schema",
                                verbose_name="metadata schema",
                            ),
                        ),
                        (
                            "should_imply",
                            models.ManyToManyField(
                                blank=True,
                                db_column="should_imply",
                                help_text="Terms that should be implied (if meaningful) by any terms used to describe this event type.",
                                to="irekua_terms.Term",
                                verbose_name="should imply",
                            ),
                        ),
                        (
                            "term_types",
                            models.ManyToManyField(
                                blank=True,
                                db_column="term_types",
                                help_text="Valid term types with which to label this type of events",
                                to="irekua_terms.TermType",
                                verbose_name="term types",
                            ),
                        ),
                    ],
                    options={
                        "verbose_name": "Event Type",
                        "verbose_name_plural": "Event Types",
                        "ordering": ["name"],
                    },
                ),
                migrations.AlterField(
                    model_name="annotation",
                    name="annotation",
                    field=models.JSONField(
                        blank=True,
                        db_column="annotation",
                        help_text="Information of annotation location within item",
                        verbose_name="annotation",
                    ),
                ),
                migrations.AlterField(
                    model_name="item",
                    name="media_info",
                    field=models.JSONField(
                        blank=True,
                        db_column="media_info",
                        help_text="Information of resource file",
                        verbose_name="media info",
                    ),
                ),
                migrations.AlterField(
                    model_name="item",
                    name="metadata",
                    field=models.JSONField(
                        blank=True,
                        db_column="metadata",
                        help_text="Metadata associated to item",
                        null=True,
                        verbose_name="metadata",
                    ),
                ),
                migrations.AlterField(
                    model_name="licence",
                    name="metadata",
                    field=models.JSONField(
                        blank=True,
                        db_column="metadata",
                        help_text="Metadata associated with licence",
                        null=True,
                        verbose_name="metadata",
                    ),
                ),
                migrations.AlterField(
                    model_name="secondaryitem",
                    name="media_info",
                    field=models.JSONField(
                        blank=True,
                        db_column="media_info",
                        help_text="Media information of secondary item file",
                        null=True,
                        verbose_name="media info",
                    ),
                ),
                migrations.CreateModel(
                    name="LicenceType",
                    fields=[
                        (
                            "id",
                            models.AutoField(
                                auto_created=True,
                                primary_key=True,
                                serialize=False,
                                verbose_name="ID",
                            ),
                        ),
                        (
                            "created_on",
                            models.DateTimeField(
                                auto_now_add=True,
                                db_column="created_on",
                                help_text="Date of creation",
                                verbose_name="created on",
                            ),
                        ),
                        (
                            "modified_on",
                            models.DateTimeField(
                                auto_now=True,
                                db_column="modified_on",
                                help_text="Date of last modification",
                                verbose_name="modified on",
                            ),
                        ),
                        (
                            "name",
                            models.CharField(
                                db_column="name",
                                help_text="Licence type name",
                                max_length=128,
                                unique=True,
                                verbose_name="name",
                            ),
                        ),
                        (
                            "description",
                            models.TextField(
                                db_column="description",
                                help_text="Description of licence",
                                verbose_name="description",
                            ),
                        ),
                        (
                            "icon",
                            models.ImageField(
                                blank=True,
                                db_column="icon",
                                help_text="Licence type icon",
                                null=True,
                                upload_to="images/licence_types/",
                                verbose_name="icon",
                            ),
                        ),
                        (
                            "document_template",
                            models.FileField(
                                blank=True,
                                db_column="document_template",
                                help_text="Template for licence document",
                                null=True,
                                upload_to="documents/licence_types/",
                                verbose_name="document template",
                            ),
                        ),
                        (
                            "years_valid_for",
                            models.IntegerField(
                                db_column="years_valid_for",
                                help_text="Number of years for which licences of this type are valid",
                                verbose_name="years valid for",
                            ),
                        ),
                        (
                            "can_view",
                            models.BooleanField(
                                db_column="can_view",
                                help_text="Any user can view item info",
                                verbose_name="can view",
                            ),
                        ),
                        (
                            "can_download",
                            models.BooleanField(
                                db_column="can_download",
                                help_text="Any user can download item",
                                verbose_name="can download",
                            ),
                        ),
                        (
                            "can_view_annotations",
                            models.BooleanField(
                                db_column="can_view_annotations",
                                help_text="Any user can view item annotations",
                                verbose_name="can view annotations",
                            ),
                        ),
                        (
                            "can_annotate",
                            models.BooleanField(
                                db_column="can_annotate",
                                help_text="Any user can annotate item",
                                verbose_name="can annotate",
                            ),
                        ),
                        (
                            "can_vote_annotations",
                            models.BooleanField(
                                db_column="can_vote_annotations",
                                help_text="Any user can vote on item annotations",
                                verbose_name="can vote annotations",
                            ),
                        ),
                        (
                            "metadata_schema",
                            models.ForeignKey(
                                blank=True,
                                db_column="metadata_schema_id",
                                help_text="JSON Schema for additional metadata",
                                null=True,
                                on_delete=django.db.models.deletion.PROTECT,
                                related_name="licencetype_metadata_schema",
                                to="irekua_schemas.schema",
                                verbose_name="metadata schema",
                            ),
                        ),
                    ],
                    options={
                        "verbose_name": "Licence Type",
                        "verbose_name_plural": "Licence Types",
                        "ordering": ["name"],
                    },
                ),
                migrations.CreateModel(
                    name="ItemType",
                    fields=[
                        (
                            "id",
                            models.AutoField(
                                auto_created=True,
                                primary_key=True,
                                serialize=False,
                                verbose_name="ID",
                            ),
                        ),
                        (
                            "created_on",
                            models.DateTimeField(
                                auto_now_add=True,
                                db_column="created_on",
                                help_text="Date of creation",
                                verbose_name="created on",
                            ),
                        ),
                        (
                            "modified_on",
                            models.DateTimeField(
                                auto_now=True,
                                db_column="modified_on",
                                help_text="Date of last modification",
                                verbose_name="modified on",
                            ),
                        ),
                        (
                            "name",
                            models.CharField(
                                db_column="name",
                                help_text="Name of item type",
                                max_length=64,
                                unique=True,
                                verbose_name="name",
                            ),
                        ),
                        (
                            "description",
                            models.TextField(
                                db_column="description",
                                help_text="Description of item type",
                                verbose_name="description",
                            ),
                        ),
                        (
                            "icon",
                            models.ImageField(
                                blank=True,
                                db_column="icon",
                                help_text="Item type icon",
                                null=True,
                                upload_to="images/item_types/",
                                verbose_name="icon",
                            ),
                        ),
                        (
                            "event_types",
                            models.ManyToManyField(
                                blank=True,
                                db_column="event_types",
                                help_text="Types of event for this item type",
                                to="irekua_items.EventType",
                                verbose_name="event types",
                            ),
                        ),
                        (
                            "metadata_schema",
                            models.ForeignKey(
                                blank=True,
                                db_column="metadata_schema_id",
                                help_text="JSON Schema for additional metadata",
                                null=True,
                                on_delete=django.db.models.deletion.PROTECT,
                                related_name="itemtype_metadata_schema",
                                to="irekua_schemas.schema",
                                verbose_name="metadata schema",
                            ),
                        ),
                        (
                            "mime_types",
                            models.ManyToManyField(
                                blank=True,
                                db_column="mime_types",
                                help_text="Mime types of files for this item type",
                                to="irekua_types.MimeType",
                                verbose_name="mime types",
                            ),
                        ),
                    ],
                    options={
                        "verbose_name": "Item Type",
                        "verbose_name_plural": "Item Types",
                        "ordering": ["name"],
                    },
                ),
                migrations.AlterField(
                    model_name="annotation",
                    name="annotation_type",
                    field=models.ForeignKey(
                        db_column="annotation_type_id",
                        help_text="Type of annotation",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="irekua_items.annotationtype",
                        verbose_name="annotation type",
                    ),
                ),
                migrations.AlterField(
                    model_name="annotation",
                    name="event_type",
                    field=models.ForeignKey(
                        db_column="event_type_id",
                        help_text="Type of event being annotated",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="irekua_items.eventtype",
                        verbose_name="event type",
                    ),
                ),
                migrations.AlterField(
                    model_name="item",
                    name="item_type",
                    field=models.ForeignKey(
                        db_column="item_type_id",
                        help_text="Type of resource",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="irekua_items.itemtype",
                        verbose_name="item type",
                    ),
                ),
                migrations.AlterField(
                    model_name="item",
                    name="ready_event_types",
                    field=models.ManyToManyField(
                        blank=True,
                        help_text="Types of event for which item has been fully annotated",
                        to="irekua_items.EventType",
                        verbose_name="ready event types",
                    ),
                ),
                migrations.AlterField(
                    model_name="licence",
                    name="licence_type",
                    field=models.ForeignKey(
                        db_column="licence_type_id",
                        help_text="Type of licence used",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="irekua_items.licencetype",
                        verbose_name="licence type",
                    ),
                ),
                migrations.AlterField(
                    model_name="secondaryitem",
                    name="item_type",
                    field=models.ForeignKey(
                        db_column="item_type",
                        help_text="Type of file of secondary item",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="irekua_items.itemtype",
                        verbose_name="item type",
                    ),
                ),
            ],
            database_operations=[],
        )
    ]
