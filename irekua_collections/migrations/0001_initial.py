# Generated by Django 3.1 on 2020-10-13 00:45

from django.conf import settings
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import irekua_database.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('irekua_types', '0001_initial'),
        ('irekua_devices', '0001_initial'),
        ('irekua_items', '0001_initial'),
        ('irekua_geo', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.CreateModel(
                    name='Collection',
                    fields=[
                        ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                        ('created_on', models.DateTimeField(auto_now_add=True, db_column='created_on', help_text='Date of creation', verbose_name='created on')),
                        ('modified_on', models.DateTimeField(auto_now=True, db_column='modified_on', help_text='Date of last modification', verbose_name='modified on')),
                        ('name', models.CharField(db_column='name', help_text='Name of collection', max_length=128, unique=True, verbose_name='name')),
                        ('description', models.TextField(db_column='description', help_text='Description of collection', verbose_name='description')),
                        ('metadata', models.JSONField(blank=True, db_column='metadata', default=irekua_database.utils.empty_JSON, help_text='Metadata associated to collection', verbose_name='metadata')),
                        ('logo', models.ImageField(blank=True, db_column='logo', help_text='Logo of data collection', null=True, upload_to='images/collections/', verbose_name='logo')),
                        ('is_open', models.BooleanField(blank=True, db_column='is_open', default=False, help_text='Boolean flag indicating whether contents of the collection are public.', verbose_name='is open')),
                        ('administrators', models.ManyToManyField(blank=True, help_text='Administrators of collection', related_name='collection_administrators', to=settings.AUTH_USER_MODEL, verbose_name='administrators')),
                    ],
                    options={
                        'verbose_name': 'Collection',
                        'verbose_name_plural': 'Collections',
                        'ordering': ['-created_on'],
                        'permissions': (('add_collection_site', 'Can add site to collection'), ('add_collection_item', 'Can add item to collection'), ('add_collection_device', 'Can add device to collection'), ('add_collection_sampling_event', 'Can add a sampling event to collection'), ('add_collection_user', 'Can add user to collection'), ('add_collection_licence', 'Can add licence to collection'), ('add_collection_annotation', 'Can annotate items in collection'), ('add_collection_annotation_vote', 'Can vote on annotations of items in collection'), ('view_collection_sites', 'Can view sites in collection'), ('view_collection_items', 'Can view items in collection'), ('view_collection_devices', 'Can view devices in collection'), ('view_collection_sampling_events', 'Can view sampling event in collection'), ('view_collection_annotations', 'Can view annotations of items in collection'), ('change_collection_sites', 'Can change sites in collection'), ('change_collection_users', 'Can change user info in collection'), ('change_collection_items', 'Can change items in collection'), ('change_collection_devices', 'Can change devices in collection'), ('change_collection_annotations', 'Can change annotations of items in collection'), ('change_collection_sampling_events', 'Can change sampling events in collection'), ('download_collection_items', 'Can download annotation items')),
                    },
                ),
                migrations.CreateModel(
                    name='CollectionDevice',
                    fields=[
                        ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                        ('created_on', models.DateTimeField(auto_now_add=True, db_column='created_on', help_text='Date of creation', verbose_name='created on')),
                        ('modified_on', models.DateTimeField(auto_now=True, db_column='modified_on', help_text='Date of last modification', verbose_name='modified on')),
                        ('internal_id', models.CharField(blank=True, db_column='internal_id', help_text='ID of device within the collection (visible to all collection users)', max_length=64, verbose_name='ID within collection')),
                        ('metadata', models.JSONField(blank=True, db_column='metadata', default=irekua_database.utils.empty_JSON, help_text='Metadata associated with device within collection', null=True, verbose_name='metadata')),
                        ('collection', models.ForeignKey(db_column='collection_id', help_text='Collection to which the device belongs', on_delete=django.db.models.deletion.CASCADE, to='irekua_collections.collection', verbose_name='collection')),
                        ('created_by', models.ForeignKey(blank=True, db_column='creator_id', help_text='Creator of object', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='collectiondevice_created_by', to=settings.AUTH_USER_MODEL, verbose_name='creator')),
                        ('modified_by', models.ForeignKey(blank=True, db_column='modified_by', editable=False, help_text='User who made modifications last', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='collectiondevice_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='modified by')),
                        ('physical_device', models.ForeignKey(db_column='physical_device_id', help_text='Reference to physical device', on_delete=django.db.models.deletion.PROTECT, to='irekua_devices.physicaldevice', verbose_name='physical device')),
                    ],
                    options={
                        'verbose_name': 'Collection Device',
                        'verbose_name_plural': 'Collection Devices',
                        'ordering': ['-modified_on'],
                        'unique_together': {('physical_device', 'collection')},
                    },
                ),
                migrations.CreateModel(
                    name='CollectionDeviceType',
                    fields=[
                        ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                        ('created_on', models.DateTimeField(auto_now_add=True, db_column='created_on', help_text='Date of creation', verbose_name='created on')),
                        ('modified_on', models.DateTimeField(auto_now=True, db_column='modified_on', help_text='Date of last modification', verbose_name='modified on')),
                        ('metadata_schema', models.JSONField(blank=True, db_column='metadata_schema', default=irekua_database.utils.simple_JSON_schema, help_text='JSON Schema for metadata of collection device info', validators=[irekua_database.utils.validate_JSON_schema], verbose_name='metadata schema')),
                    ],
                    options={
                        'verbose_name': 'Collection Device Type',
                        'verbose_name_plural': 'Collection Device Types',
                    },
                ),
                migrations.CreateModel(
                    name='CollectionItem',
                    fields=[
                        ('item_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='irekua_items.item')),
                        ('collection', models.ForeignKey(db_column='collection_id', help_text='Collection to which this item belongs', on_delete=django.db.models.deletion.PROTECT, to='irekua_collections.collection', verbose_name='collection')),
                    ],
                    options={
                        'verbose_name': 'Collection Item',
                        'verbose_name_plural': 'Collection Items',
                    },
                    bases=('irekua_items.item',),
                ),
                migrations.CreateModel(
                    name='CollectionItemType',
                    fields=[
                        ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                        ('created_on', models.DateTimeField(auto_now_add=True, db_column='created_on', help_text='Date of creation', verbose_name='created on')),
                        ('modified_on', models.DateTimeField(auto_now=True, db_column='modified_on', help_text='Date of last modification', verbose_name='modified on')),
                        ('metadata_schema', models.JSONField(blank=True, db_column='metadata_schema', default=irekua_database.utils.simple_JSON_schema, help_text='JSON Schema for metadata of collection item info', validators=[irekua_database.utils.validate_JSON_schema], verbose_name='metadata schema')),
                    ],
                    options={
                        'verbose_name': 'Collection Item Type',
                        'verbose_name_plural': 'Collection Item Types',
                    },
                ),
                migrations.CreateModel(
                    name='CollectionRole',
                    fields=[
                        ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                        ('created_on', models.DateTimeField(auto_now_add=True, db_column='created_on', help_text='Date of creation', verbose_name='created on')),
                        ('modified_on', models.DateTimeField(auto_now=True, db_column='modified_on', help_text='Date of last modification', verbose_name='modified on')),
                        ('metadata_schema', models.JSONField(blank=True, db_column='metadata_schema', default=irekua_database.utils.simple_JSON_schema, help_text='JSON Schema for metadata of collection role info', validators=[irekua_database.utils.validate_JSON_schema], verbose_name='metadata schema')),
                    ],
                    options={
                        'verbose_name': 'Collection Role',
                        'verbose_name_plural': 'Collection Roles',
                    },
                ),
                migrations.CreateModel(
                    name='CollectionSite',
                    fields=[
                        ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                        ('created_on', models.DateTimeField(auto_now_add=True, db_column='created_on', help_text='Date of creation', verbose_name='created on')),
                        ('modified_on', models.DateTimeField(auto_now=True, db_column='modified_on', help_text='Date of last modification', verbose_name='modified on')),
                        ('metadata', models.JSONField(blank=True, db_column='metadata', default=irekua_database.utils.empty_JSON, help_text='Metadata associated to site in collection', null=True, verbose_name='metadata')),
                        ('internal_id', models.CharField(blank=True, db_column='internal_id', help_text='ID of site within the collection (visible to all collection users)', max_length=64, verbose_name='ID within collection')),
                        ('collection', models.ForeignKey(db_column='collection_id', help_text='Collection to which the site belongs', on_delete=django.db.models.deletion.CASCADE, to='irekua_collections.collection', verbose_name='collection')),
                        ('created_by', models.ForeignKey(blank=True, db_column='creator_id', help_text='Creator of object', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='collectionsite_created_by', to=settings.AUTH_USER_MODEL, verbose_name='creator')),
                        ('modified_by', models.ForeignKey(blank=True, db_column='modified_by', editable=False, help_text='User who made modifications last', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='collectionsite_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='modified by')),
                        ('site', models.ForeignKey(db_column='site_id', help_text='Reference to Site', on_delete=django.db.models.deletion.PROTECT, to='irekua_geo.site', verbose_name='site')),
                        ('site_descriptors', models.ManyToManyField(blank=True, to='irekua_geo.SiteDescriptor')),
                        ('site_type', models.ForeignKey(db_column='site_type', help_text='Type of site', on_delete=django.db.models.deletion.PROTECT, to='irekua_types.sitetype', verbose_name='site type')),
                    ],
                    options={
                        'verbose_name': 'Collection Site',
                        'verbose_name_plural': 'Collection Sites',
                        'unique_together': {('collection', 'site'), ('collection', 'internal_id')},
                    },
                ),
                migrations.CreateModel(
                    name='SamplingEvent',
                    fields=[
                        ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                        ('created_on', models.DateTimeField(auto_now_add=True, db_column='created_on', help_text='Date of creation', verbose_name='created on')),
                        ('modified_on', models.DateTimeField(auto_now=True, db_column='modified_on', help_text='Date of last modification', verbose_name='modified on')),
                        ('commentaries', models.TextField(blank=True, db_column='commentaries', help_text='Sampling event commentaries', verbose_name='commentaries')),
                        ('metadata', models.JSONField(blank=True, db_column='metadata', default=irekua_database.utils.empty_JSON, help_text='Metadata associated to sampling event', null=True, verbose_name='metadata')),
                        ('started_on', models.DateTimeField(blank=True, db_column='started_on', help_text='Date at which sampling begun', null=True, verbose_name='started on')),
                        ('ended_on', models.DateTimeField(blank=True, db_column='ended_on', help_text='Date at which sampling stoped', null=True, verbose_name='ended on')),
                        ('collection', models.ForeignKey(db_column='collection_id', help_text='Collection to which sampling event belongs', on_delete=django.db.models.deletion.PROTECT, to='irekua_collections.collection', verbose_name='collection')),
                        ('collection_site', models.ForeignKey(blank=True, db_column='collection_site_id', help_text='Reference to site at which sampling took place', null=True, on_delete=django.db.models.deletion.PROTECT, to='irekua_collections.collectionsite', verbose_name='collection site')),
                        ('created_by', models.ForeignKey(blank=True, db_column='creator_id', help_text='Creator of object', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='samplingevent_created_by', to=settings.AUTH_USER_MODEL, verbose_name='creator')),
                        ('licence', models.ForeignKey(blank=True, db_column='licence_id', help_text='Licence for all items in sampling event', null=True, on_delete=django.db.models.deletion.PROTECT, to='irekua_items.licence', verbose_name='licence')),
                        ('modified_by', models.ForeignKey(blank=True, db_column='modified_by', editable=False, help_text='User who made modifications last', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='samplingevent_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='modified by')),
                        ('sampling_event_type', models.ForeignKey(db_column='sampling_event_type', help_text='Type of sampling event', on_delete=django.db.models.deletion.PROTECT, to='irekua_types.samplingeventtype', verbose_name='sampling event type')),
                    ],
                    options={
                        'verbose_name': 'Sampling Event',
                        'verbose_name_plural': 'Sampling Events',
                        'ordering': ['-created_on'],
                    },
                ),
                migrations.CreateModel(
                    name='CollectionUser',
                    fields=[
                        ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                        ('created_on', models.DateTimeField(auto_now_add=True, db_column='created_on', help_text='Date of creation', verbose_name='created on')),
                        ('modified_on', models.DateTimeField(auto_now=True, db_column='modified_on', help_text='Date of last modification', verbose_name='modified on')),
                        ('metadata', models.JSONField(blank=True, db_column='metadata', default=irekua_database.utils.empty_JSON, help_text='Metadata associated to user in collection', null=True, verbose_name='metadata')),
                        ('collection', models.ForeignKey(db_column='collection_id', help_text='Collection to which user belongs', on_delete=django.db.models.deletion.CASCADE, to='irekua_collections.collection', verbose_name='collection')),
                        ('created_by', models.ForeignKey(blank=True, db_column='creator_id', help_text='Creator of object', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='collectionuser_created_by', to=settings.AUTH_USER_MODEL, verbose_name='creator')),
                        ('modified_by', models.ForeignKey(blank=True, db_column='modified_by', editable=False, help_text='User who made modifications last', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='collectionuser_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='modified by')),
                        ('role', models.ForeignKey(db_column='role_id', help_text='Role of user in collection', on_delete=django.db.models.deletion.PROTECT, to='irekua_database.role', verbose_name='role')),
                        ('user', models.ForeignKey(db_column='user_id', help_text='User of collection', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
                    ],
                    options={
                        'verbose_name': 'Collection User',
                        'verbose_name_plural': 'Collection Users',
                        'unique_together': {('collection', 'user')},
                    },
                ),
                migrations.CreateModel(
                    name='CollectionType',
                    fields=[
                        ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                        ('created_on', models.DateTimeField(auto_now_add=True, db_column='created_on', help_text='Date of creation', verbose_name='created on')),
                        ('modified_on', models.DateTimeField(auto_now=True, db_column='modified_on', help_text='Date of last modification', verbose_name='modified on')),
                        ('name', models.CharField(db_column='name', help_text='Name of collection type', max_length=128, unique=True, verbose_name='name')),
                        ('description', models.TextField(db_column='description', help_text='Description of collection type', verbose_name='description')),
                        ('logo', models.ImageField(blank=True, db_column='logo', help_text='Logo of collection type', null=True, upload_to='images/collection_types/', verbose_name='logo')),
                        ('metadata_schema', models.JSONField(blank=True, db_column='metadata_schema', default=irekua_database.utils.simple_JSON_schema, help_text='JSON Schema for metadata of collection info', validators=[irekua_database.utils.validate_JSON_schema], verbose_name='metadata schema')),
                        ('anyone_can_create', models.BooleanField(blank=True, db_column='anyone_can_create', default=False, help_text='Boolean flag indicating wheter any user can create collections of this type', verbose_name='anyone can create')),
                        ('restrict_site_types', models.BooleanField(blank=True, db_column='restrict_site_types', default=True, help_text='Flag indicating whether types of sites are restricted to registered ones', verbose_name='restrict site types')),
                        ('restrict_annotation_types', models.BooleanField(blank=True, db_column='restrict_annotation_types', default=True, help_text='Flag indicating whether types of annotations are restricted to registered ones', verbose_name='restrict annotation types')),
                        ('restrict_item_types', models.BooleanField(blank=True, db_column='restrict_item_types', default=True, help_text='Flag indicating whether types of items are restricted to registered ones', verbose_name='restrict item types')),
                        ('restrict_licence_types', models.BooleanField(blank=True, db_column='restrict_licence_types', default=True, help_text='Flag indicating whether types of licences are restricted to registered ones', verbose_name='restrict licence types')),
                        ('restrict_device_types', models.BooleanField(blank=True, db_column='restrict_device_types', default=True, help_text='Flag indicating whether types of devices are restricted to registered ones', verbose_name='restrict device types')),
                        ('restrict_event_types', models.BooleanField(blank=True, db_column='restrict_event_types', default=True, help_text='Flag indicating whether types of events are restricted to registered ones', verbose_name='restrict event types')),
                        ('restrict_sampling_event_types', models.BooleanField(blank=True, db_column='restrict_sampling_event_types', default=True, help_text='Flag indicating whether types of sampling events are restricted to registered ones', verbose_name='restrict sampling event types')),
                        ('administrators', models.ManyToManyField(blank=True, help_text='Administrators of this collection type. Administrators can create collections of this type', to=settings.AUTH_USER_MODEL, verbose_name='administrators')),
                        ('annotation_types', models.ManyToManyField(blank=True, help_text='Types of annotations valid for collections of type', to='irekua_types.AnnotationType', verbose_name='annotation types')),
                        ('device_types', models.ManyToManyField(blank=True, help_text='Types of devices valid for collections of type', through='irekua_collections.CollectionDeviceType', to='irekua_types.DeviceType', verbose_name='device types')),
                        ('event_types', models.ManyToManyField(blank=True, help_text='Types of events valid for collections of type', to='irekua_types.EventType', verbose_name='event types')),
                        ('item_types', models.ManyToManyField(blank=True, help_text='Types of items valid for collections of type', through='irekua_collections.CollectionItemType', to='irekua_types.ItemType', verbose_name='item types')),
                        ('licence_types', models.ManyToManyField(blank=True, help_text='Types of licences valid for collections of type', to='irekua_types.LicenceType', verbose_name='licence types')),
                        ('roles', models.ManyToManyField(blank=True, help_text='Roles valid for collections of type', through='irekua_collections.CollectionRole', to='irekua_database.Role', verbose_name='roles')),
                        ('sampling_event_types', models.ManyToManyField(blank=True, help_text='Types of sampling events valid for collections of type', to='irekua_types.SamplingEventType', verbose_name='sampling event types')),
                        ('site_types', models.ManyToManyField(blank=True, help_text='Types of sites valid for collections of type', to='irekua_types.SiteType', verbose_name='site types')),
                    ],
                    options={
                        'verbose_name': 'Collection Type',
                        'verbose_name_plural': 'Collection Types',
                        'ordering': ['name'],
                    },
                ),
                migrations.AddField(
                    model_name='collectionrole',
                    name='collection_type',
                    field=models.ForeignKey(db_column='collection_type_id', help_text='Collection type in which role applies', on_delete=django.db.models.deletion.CASCADE, to='irekua_collections.collectiontype', verbose_name='collection type'),
                ),
                migrations.AddField(
                    model_name='collectionrole',
                    name='role',
                    field=models.ForeignKey(db_column='role_id', help_text='Role to be part of collection', on_delete=django.db.models.deletion.PROTECT, to='irekua_database.role', verbose_name='role'),
                ),
                migrations.CreateModel(
                    name='CollectionLicence',
                    fields=[
                        ('licence_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='irekua_items.licence')),
                        ('collection', models.ForeignKey(db_column='collection_id', help_text='Collection to which this licence belongs', on_delete=django.db.models.deletion.CASCADE, to='irekua_collections.collection', verbose_name='collection')),
                    ],
                    options={
                        'verbose_name': 'Collection Licence',
                        'verbose_name_plural': 'Collection Licences',
                        'ordering': ['-created_on'],
                    },
                    bases=('irekua_items.licence',),
                ),
                migrations.AddField(
                    model_name='collectionitemtype',
                    name='collection_type',
                    field=models.ForeignKey(db_column='collection_type_id', help_text='Collection type in which role applies', on_delete=django.db.models.deletion.CASCADE, to='irekua_collections.collectiontype', verbose_name='collection type'),
                ),
                migrations.AddField(
                    model_name='collectionitemtype',
                    name='item_type',
                    field=models.ForeignKey(db_column='item_type_id', help_text='Item to be part of collection', on_delete=django.db.models.deletion.PROTECT, to='irekua_types.itemtype', verbose_name='item type'),
                ),
                migrations.AddField(
                    model_name='collectiondevicetype',
                    name='collection_type',
                    field=models.ForeignKey(db_column='collection_type_id', help_text='Collection type in which role applies', on_delete=django.db.models.deletion.CASCADE, to='irekua_collections.collectiontype', verbose_name='collection type'),
                ),
                migrations.AddField(
                    model_name='collectiondevicetype',
                    name='device_type',
                    field=models.ForeignKey(db_column='device_type_id', help_text='Device to be part of collection', on_delete=django.db.models.deletion.PROTECT, to='irekua_types.devicetype', verbose_name='device type'),
                ),
                migrations.AddField(
                    model_name='collection',
                    name='collection_type',
                    field=models.ForeignKey(db_column='collection_type_id', help_text='Type of collection', on_delete=django.db.models.deletion.PROTECT, to='irekua_collections.collectiontype', verbose_name='collection type'),
                ),
                migrations.AddField(
                    model_name='collection',
                    name='created_by',
                    field=models.ForeignKey(blank=True, db_column='creator_id', help_text='Creator of object', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='collection_created_by', to=settings.AUTH_USER_MODEL, verbose_name='creator'),
                ),
                migrations.AddField(
                    model_name='collection',
                    name='institution',
                    field=models.ForeignKey(blank=True, db_column='institution_id', help_text='Institution to which the collection belogs', null=True, on_delete=django.db.models.deletion.PROTECT, to='irekua_database.institution', verbose_name='institution'),
                ),
                migrations.AddField(
                    model_name='collection',
                    name='modified_by',
                    field=models.ForeignKey(blank=True, db_column='modified_by', editable=False, help_text='User who made modifications last', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='collection_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='modified by'),
                ),
                migrations.AddField(
                    model_name='collection',
                    name='physical_devices',
                    field=models.ManyToManyField(blank=True, through='irekua_collections.CollectionDevice', to='irekua_devices.PhysicalDevice'),
                ),
                migrations.AddField(
                    model_name='collection',
                    name='sites',
                    field=models.ManyToManyField(blank=True, through='irekua_collections.CollectionSite', to='irekua_geo.Site'),
                ),
                migrations.AddField(
                    model_name='collection',
                    name='users',
                    field=models.ManyToManyField(blank=True, related_name='collection_users', through='irekua_collections.CollectionUser', to=settings.AUTH_USER_MODEL),
                ),
                migrations.CreateModel(
                    name='SamplingEventItem',
                    fields=[
                        ('collectionitem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='irekua_collections.collectionitem')),
                        ('sampling_event', models.ForeignKey(db_column='sampling_event_id', help_text='Sampling event in which this item was captured', on_delete=django.db.models.deletion.PROTECT, to='irekua_collections.samplingevent', verbose_name='sampling event')),
                    ],
                    options={
                        'verbose_name': 'Sampling Event Item',
                        'verbose_name_plural': 'Sampling Event Items',
                    },
                    bases=('irekua_collections.collectionitem',),
                ),
                migrations.CreateModel(
                    name='Deployment',
                    fields=[
                        ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                        ('created_on', models.DateTimeField(auto_now_add=True, db_column='created_on', help_text='Date of creation', verbose_name='created on')),
                        ('modified_on', models.DateTimeField(auto_now=True, db_column='modified_on', help_text='Date of last modification', verbose_name='modified on')),
                        ('deployed_on', models.DateTimeField(blank=True, db_column='deployed_on', help_text='Date at which the device started capturing information.', null=True, verbose_name='deployed on')),
                        ('recovered_on', models.DateTimeField(blank=True, db_column='recovered_on', help_text='Date at which the device stoped capturing information.', null=True, verbose_name='recovered on')),
                        ('geo_ref', django.contrib.gis.db.models.fields.PointField(blank=True, db_column='geo_ref', help_text='Georeference of deployed device as Geometry', null=True, srid=4326, verbose_name='geo ref')),
                        ('latitude', models.FloatField(blank=True, db_column='latitude', help_text='Latitude of deployed device (in decimal degrees)', null=True, validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)], verbose_name='latitude')),
                        ('longitude', models.FloatField(blank=True, db_column='longitude', help_text='Longitude of deployed device (in decimal degrees)', null=True, validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)], verbose_name='longitude')),
                        ('altitude', models.FloatField(blank=True, db_column='altitude', help_text='Altitude of deployed device (in meters)', null=True, verbose_name='altitude')),
                        ('commentaries', models.TextField(blank=True, db_column='commentaries', help_text='Sampling event commentaries', verbose_name='commentaries')),
                        ('metadata', models.JSONField(blank=True, db_column='metadata', default=irekua_database.utils.empty_JSON, help_text='Metadata associated to sampling event device', null=True, verbose_name='metadata')),
                        ('configuration', models.JSONField(blank=True, db_column='configuration', default=irekua_database.utils.empty_JSON, help_text='Configuration on device through the sampling event', null=True, verbose_name='configuration')),
                        ('collection_device', models.ForeignKey(blank=True, db_column='collection_device_id', help_text='Reference to collection device used on sampling event', null=True, on_delete=django.db.models.deletion.PROTECT, to='irekua_collections.collectiondevice', verbose_name='collection device')),
                        ('created_by', models.ForeignKey(blank=True, db_column='creator_id', help_text='Creator of object', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='deployment_created_by', to=settings.AUTH_USER_MODEL, verbose_name='creator')),
                        ('deployment_type', models.ForeignKey(db_column='deployment_type_id', help_text='Type of deployment', on_delete=django.db.models.deletion.PROTECT, to='irekua_types.deploymenttype', verbose_name='deployment type')),
                        ('licence', models.ForeignKey(blank=True, db_column='licence_id', help_text='Licence for all items in sampling event', null=True, on_delete=django.db.models.deletion.PROTECT, to='irekua_items.licence', verbose_name='licence')),
                        ('modified_by', models.ForeignKey(blank=True, db_column='modified_by', editable=False, help_text='User who made modifications last', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deployment_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='modified by')),
                        ('sampling_event', models.ForeignKey(db_column='sampling_event_id', help_text='Sampling event in which this device was deployed', on_delete=django.db.models.deletion.PROTECT, to='irekua_collections.samplingevent', verbose_name='sampling event')),
                    ],
                    options={
                        'verbose_name': 'Deployment',
                        'verbose_name_plural': 'Deployments',
                        'ordering': ['-created_on'],
                        'unique_together': {('sampling_event', 'collection_device')},
                    },
                ),
                migrations.AlterUniqueTogether(
                    name='collectionrole',
                    unique_together={('collection_type', 'role')},
                ),
                migrations.AlterUniqueTogether(
                    name='collectionitemtype',
                    unique_together={('collection_type', 'item_type')},
                ),
                migrations.AlterUniqueTogether(
                    name='collectiondevicetype',
                    unique_together={('collection_type', 'device_type')},
                ),
                migrations.CreateModel(
                    name='DeploymentItem',
                    fields=[
                        ('samplingeventitem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='irekua_collections.samplingeventitem')),
                        ('deployment', models.ForeignKey(db_column='deployment_id', help_text='Deployment of device in which this item was captured', on_delete=django.db.models.deletion.PROTECT, to='irekua_collections.deployment', verbose_name='deployment')),
                    ],
                    options={
                        'verbose_name': 'Deployment Item',
                        'verbose_name_plural': 'Deployment Items',
                    },
                    bases=('irekua_collections.samplingeventitem',),
                ),
            ],
            database_operations=[],
        ),
    ]
