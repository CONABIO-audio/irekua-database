# Generated by Django 3.1.2 on 2020-10-20 17:27

from django.db import migrations, models
import django.db.models.deletion


def change_collection_type_through_models(apps, schema_editor):
    CollectionType = apps.get_model("irekua_collections", "CollectionType")

    for collection_type in CollectionType.objects.all():
        for annotation_type in collection_type.annotation_types.all():
            collection_type.annotation_types_tmp.add(annotation_type)

        for event_type in collection_type.event_types.all():
            collection_type.event_types_tmp.add(event_type)

        for licence_type in collection_type.licence_types.all():
            collection_type.licence_types_tmp.add(licence_type)

        for sampling_event_type in collection_type.sampling_event_types.all():
            collection_type.sampling_event_types_tmp.add(sampling_event_type)

        for site_type in collection_type.site_types.all():
            collection_type.site_types_tmp.add(site_type)

        collection_type.save()


class Migration(migrations.Migration):

    dependencies = [
        ("irekua_types", "0005_auto_20201019_1402"),
        ("irekua_schemas", "0002_auto_20201018_2158"),
        ("irekua_collections", "0003_rename_collection_type_models"),
    ]

    operations = [
        migrations.AddField(
            model_name="collectiontype",
            name="restrict_deployment_types",
            field=models.BooleanField(
                blank=True,
                db_column="restrict_deployment_types",
                default=True,
                help_text="Flag indicating whether types of deployment are restricted to registered ones",
                verbose_name="restrict deployment types",
            ),
        ),
        migrations.AlterField(
            model_name="collectiontypedevicetype",
            name="collection_type",
            field=models.ForeignKey(
                db_column="collection_type_id",
                help_text="Collection type in which device type is permitted",
                on_delete=django.db.models.deletion.CASCADE,
                to="irekua_collections.collectiontype",
                verbose_name="collection type",
            ),
        ),
        migrations.AlterField(
            model_name="collectiontypeitemtype",
            name="collection_type",
            field=models.ForeignKey(
                db_column="collection_type_id",
                help_text="Collection type in which this item type is permitted",
                on_delete=django.db.models.deletion.CASCADE,
                to="irekua_collections.collectiontype",
                verbose_name="collection type",
            ),
        ),
        migrations.CreateModel(
            name="CollectionTypeSiteType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_column="created_on",
                        help_text="Date of creation",
                        verbose_name="created on",
                    ),
                ),
                (
                    "modified_on",
                    models.DateTimeField(
                        auto_now=True,
                        db_column="modified_on",
                        help_text="Date of last modification",
                        verbose_name="modified on",
                    ),
                ),
                (
                    "collection_type",
                    models.ForeignKey(
                        db_column="collection_type_id",
                        help_text="Collection type in which this site type is permitted",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="irekua_collections.collectiontype",
                        verbose_name="collection type",
                    ),
                ),
                (
                    "metadata_schema",
                    models.ForeignKey(
                        blank=True,
                        db_column="metadata_schema_id",
                        help_text="JSON Schema for collection-specific metadata",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="collectiontypesitetype_metadata_schema",
                        to="irekua_schemas.schema",
                        verbose_name="metadata schema",
                    ),
                ),
                (
                    "site_type",
                    models.ForeignKey(
                        db_column="site_type_id",
                        help_text="Site type to be admissible in collections of this type",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="irekua_types.sitetype",
                        verbose_name="site type",
                    ),
                ),
            ],
            options={
                "verbose_name": "Collection Type Site Type",
                "verbose_name_plural": "Collection Type Site Types",
                "unique_together": {("collection_type", "site_type")},
            },
        ),
        migrations.CreateModel(
            name="CollectionTypeSamplingEventType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_column="created_on",
                        help_text="Date of creation",
                        verbose_name="created on",
                    ),
                ),
                (
                    "modified_on",
                    models.DateTimeField(
                        auto_now=True,
                        db_column="modified_on",
                        help_text="Date of last modification",
                        verbose_name="modified on",
                    ),
                ),
                (
                    "collection_type",
                    models.ForeignKey(
                        db_column="collection_type_id",
                        help_text="Collection type in which this sampling event type is permitted",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="irekua_collections.collectiontype",
                        verbose_name="collection type",
                    ),
                ),
                (
                    "metadata_schema",
                    models.ForeignKey(
                        blank=True,
                        db_column="metadata_schema_id",
                        help_text="JSON Schema for collection-specific metadata",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="collectiontypesamplingeventtype_metadata_schema",
                        to="irekua_schemas.schema",
                        verbose_name="metadata schema",
                    ),
                ),
                (
                    "sampling_event_type",
                    models.ForeignKey(
                        db_column="sampling_event_type_id",
                        help_text="Sampling Event type to be admissible in collections of this type",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="irekua_types.samplingeventtype",
                        verbose_name="sampling event type",
                    ),
                ),
            ],
            options={
                "verbose_name": "Collection Type Sampling Event Type",
                "verbose_name_plural": "Collection Type Sampling Event Types",
                "unique_together": {
                    ("collection_type", "sampling_event_type")
                },
            },
        ),
        migrations.CreateModel(
            name="CollectionTypeLicenceType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_column="created_on",
                        help_text="Date of creation",
                        verbose_name="created on",
                    ),
                ),
                (
                    "modified_on",
                    models.DateTimeField(
                        auto_now=True,
                        db_column="modified_on",
                        help_text="Date of last modification",
                        verbose_name="modified on",
                    ),
                ),
                (
                    "collection_type",
                    models.ForeignKey(
                        db_column="collection_type_id",
                        help_text="Collection type in which this licence type is permitted",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="irekua_collections.collectiontype",
                        verbose_name="collection type",
                    ),
                ),
                (
                    "licence_type",
                    models.ForeignKey(
                        db_column="licence_type_id",
                        help_text="Licence type to be admissible in collections of this type",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="irekua_types.licencetype",
                        verbose_name="licence type",
                    ),
                ),
                (
                    "metadata_schema",
                    models.ForeignKey(
                        blank=True,
                        db_column="metadata_schema_id",
                        help_text="JSON Schema for collection-specific metadata",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="collectiontypelicencetype_metadata_schema",
                        to="irekua_schemas.schema",
                        verbose_name="metadata schema",
                    ),
                ),
            ],
            options={
                "verbose_name": "Collection Type Licence Type",
                "verbose_name_plural": "Collection Type Licence Types",
                "unique_together": {("collection_type", "licence_type")},
            },
        ),
        migrations.CreateModel(
            name="CollectionTypeEventType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_column="created_on",
                        help_text="Date of creation",
                        verbose_name="created on",
                    ),
                ),
                (
                    "modified_on",
                    models.DateTimeField(
                        auto_now=True,
                        db_column="modified_on",
                        help_text="Date of last modification",
                        verbose_name="modified on",
                    ),
                ),
                (
                    "collection_type",
                    models.ForeignKey(
                        db_column="collection_type_id",
                        help_text="Collection type in which this event type is permitted",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="irekua_collections.collectiontype",
                        verbose_name="collection type",
                    ),
                ),
                (
                    "event_type",
                    models.ForeignKey(
                        db_column="event_type_id",
                        help_text="Event type to be admissible in collections of this type",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="irekua_types.eventtype",
                        verbose_name="event type",
                    ),
                ),
                (
                    "metadata_schema",
                    models.ForeignKey(
                        blank=True,
                        db_column="metadata_schema_id",
                        help_text="JSON Schema for collection-specific metadata",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="collectiontypeeventtype_metadata_schema",
                        to="irekua_schemas.schema",
                        verbose_name="metadata schema",
                    ),
                ),
            ],
            options={
                "verbose_name": "Collection Type Event Type",
                "verbose_name_plural": "Collection Type Event Types",
                "unique_together": {("collection_type", "event_type")},
            },
        ),
        migrations.CreateModel(
            name="CollectionTypeDeploymentType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_column="created_on",
                        help_text="Date of creation",
                        verbose_name="created on",
                    ),
                ),
                (
                    "modified_on",
                    models.DateTimeField(
                        auto_now=True,
                        db_column="modified_on",
                        help_text="Date of last modification",
                        verbose_name="modified on",
                    ),
                ),
                (
                    "collection_type",
                    models.ForeignKey(
                        db_column="collection_type_id",
                        help_text="Collection type in which this deployment type is permitted",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="irekua_collections.collectiontype",
                        verbose_name="collection type",
                    ),
                ),
                (
                    "deployment_type",
                    models.ForeignKey(
                        db_column="deployment_type_id",
                        help_text="Deployment type to be admissible in collections of this type",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="irekua_types.deploymenttype",
                        verbose_name="deployment type",
                    ),
                ),
                (
                    "metadata_schema",
                    models.ForeignKey(
                        blank=True,
                        db_column="metadata_schema_id",
                        help_text="JSON Schema for collection-specific metadata",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="collectiontypedeploymenttype_metadata_schema",
                        to="irekua_schemas.schema",
                        verbose_name="metadata schema",
                    ),
                ),
            ],
            options={
                "verbose_name": "Collection Type Deployment Type",
                "verbose_name_plural": "Collection Type Deployment Types",
                "unique_together": {("collection_type", "deployment_type")},
            },
        ),
        migrations.CreateModel(
            name="CollectionTypeAnnotationType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_column="created_on",
                        help_text="Date of creation",
                        verbose_name="created on",
                    ),
                ),
                (
                    "modified_on",
                    models.DateTimeField(
                        auto_now=True,
                        db_column="modified_on",
                        help_text="Date of last modification",
                        verbose_name="modified on",
                    ),
                ),
                (
                    "annotation_type",
                    models.ForeignKey(
                        db_column="annotation_type_id",
                        help_text="Annotation type to be admissible in collections of this type",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="irekua_types.annotationtype",
                        verbose_name="annotation type",
                    ),
                ),
                (
                    "collection_type",
                    models.ForeignKey(
                        db_column="collection_type_id",
                        help_text="Collection type in which this annotation type is permitted",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="irekua_collections.collectiontype",
                        verbose_name="collection type",
                    ),
                ),
                (
                    "metadata_schema",
                    models.ForeignKey(
                        blank=True,
                        db_column="metadata_schema_id",
                        help_text="JSON Schema for collection-specific metadata",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="collectiontypeannotationtype_metadata_schema",
                        to="irekua_schemas.schema",
                        verbose_name="metadata schema",
                    ),
                ),
            ],
            options={
                "verbose_name": "Collection Type Annotation Type",
                "verbose_name_plural": "Collection Type Annotation Types",
                "unique_together": {("collection_type", "annotation_type")},
            },
        ),
        migrations.AddField(
            model_name="collectiontype",
            name="deployment_types",
            field=models.ManyToManyField(
                blank=True,
                help_text="Types of deployments valid for collections of type",
                through="irekua_collections.CollectionTypeDeploymentType",
                to="irekua_types.DeploymentType",
                verbose_name="device types",
            ),
        ),
        migrations.AddField(
            model_name="collectiontype",
            name="annotation_types_tmp",
            field=models.ManyToManyField(
                blank=True,
                help_text="Types of annotations valid for collections of type",
                through="irekua_collections.CollectionTypeAnnotationType",
                to="irekua_types.AnnotationType",
                verbose_name="annotation types",
            ),
        ),
        migrations.AddField(
            model_name="collectiontype",
            name="event_types_tmp",
            field=models.ManyToManyField(
                blank=True,
                help_text="Types of events valid for collections of type",
                through="irekua_collections.CollectionTypeEventType",
                to="irekua_types.EventType",
                verbose_name="event types",
            ),
        ),
        migrations.AddField(
            model_name="collectiontype",
            name="licence_types_tmp",
            field=models.ManyToManyField(
                blank=True,
                help_text="Types of licences valid for collections of type",
                through="irekua_collections.CollectionTypeLicenceType",
                to="irekua_types.LicenceType",
                verbose_name="licence types",
            ),
        ),
        migrations.AddField(
            model_name="collectiontype",
            name="sampling_event_types_tmp",
            field=models.ManyToManyField(
                blank=True,
                help_text="Types of sampling events valid for collections of type",
                through="irekua_collections.CollectionTypeSamplingEventType",
                to="irekua_types.SamplingEventType",
                verbose_name="sampling event types",
            ),
        ),
        migrations.AddField(
            model_name="collectiontype",
            name="site_types_tmp",
            field=models.ManyToManyField(
                blank=True,
                help_text="Types of sites valid for collections of type",
                through="irekua_collections.CollectionTypeSiteType",
                to="irekua_types.SiteType",
                verbose_name="site types",
            ),
        ),
        migrations.RunPython(
            change_collection_type_through_models,
        ),
        migrations.RemoveField(
            model_name="collectiontype",
            name="annotation_types",
        ),
        migrations.RemoveField(
            model_name="collectiontype",
            name="event_types",
        ),
        migrations.RemoveField(
            model_name="collectiontype",
            name="licence_types",
        ),
        migrations.RemoveField(
            model_name="collectiontype",
            name="sampling_event_types",
        ),
        migrations.RemoveField(
            model_name="collectiontype",
            name="site_types",
        ),
        migrations.RenameField(
            model_name="collectiontype",
            old_name="annotation_types_tmp",
            new_name="annotation_types",
        ),
        migrations.RenameField(
            model_name="collectiontype",
            old_name="event_types_tmp",
            new_name="event_types",
        ),
        migrations.RenameField(
            model_name="collectiontype",
            old_name="licence_types_tmp",
            new_name="licence_types",
        ),
        migrations.RenameField(
            model_name="collectiontype",
            old_name="sampling_event_types_tmp",
            new_name="sampling_event_types",
        ),
        migrations.RenameField(
            model_name="collectiontype",
            old_name="site_types_tmp",
            new_name="site_types",
        ),
    ]
